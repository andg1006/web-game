import { useNavigate, useLocation } from 'react-router-dom';
import { useEffect, useState, useRef } from 'react';
import AutoButton from '../../button/AutoButton'; // ‚úÖ Ïò§ÌÜ†Î≤ÑÌäº import Ï∂îÍ∞Ä
import Menu from '../../navbar/menu';
import '../css/page-def.css';
import '../css/back-img3.css';

// ÍµêÎ¨¥Ïã§ ÎëòÎü¨Î≥¥Í∏∞

const dialogues = [
    { speaker: 'an', text: ' Ïó≠Ïãú Í≥ÑÎã®ÏùÄ ÌûòÎì§Îã§...' },
    { speaker: 'an', text: ' Ïó¨Í∏¥... Ïôú Ïù¥Î†áÍ≤å Ïñ¥ÎëêÏõå?' },
    { speaker: 'choi', text: ' Î©çÏ≤≠ÏïÑ... Î∞§Ïù¥ÎãàÍπå Ïñ¥Îë°ÏßÄ...' },
    { speaker: 'an', text: ' Ìó§Ìó∑...' },
    { speaker: 'choi', text: ' Ìó§Ìó∑?' },
    { speaker: 'an', text: ' ÎØ∏Ïïà...' },
    { speaker: 'choi', text: ' Í∑∏Îûò, ÏùºÎã® Î∞òÏùÑ Í∞ÄÎ≥ºÍπå?' },
    { speaker: 'an', text: ' Îπ®Î¶¨ Í∞îÎã§Í∞Ä ÎÇòÏò§Ïûê...' },
    { speaker: 'choi2', text: ' ÏúºÏïÑÏïÑÏïÖ!!!!!' },
    { speaker: 'choi2', text: ' Î∞©Í∏à... Î≠êÏòÄÏñ¥?' },
    { speaker: 'an', text: ' Î≠êÎùºÎäî Í±∞Ïïº Î¨¥ÏÑ≠Í≤å...' },
    { speaker: 'choi', text: ' Î∞©Í∏à Ï∞ΩÎ¨∏Ïù¥...' },
    { speaker: 'an', text: ' ÏßÑÏßú Ïû•ÎÇú ÏπòÏßÄÎßàÎùº...' },
    { speaker: 'choi', text: ' ÏâºÌÑ∞Ï™ΩÏúºÎ°ú Í∞ÄÎ≥ºÍπå..?' },
    { speaker: 'an', text: ' ÏïÑÎãà Î¨¥ÏÑ≠Í≤å Ïôú ÏâºÌÑ∞Î°ú Í∞Ä „Ö†„Ö†' },
    { speaker: 'an', text: ' Í∑∏ÎÉ• Î∞òÏù¥ÎÇò Îπ®Î¶¨ Îì§Î¶¨ÏûêÍ≥†...' },
    { speaker: 'choi', text: ' ÏâºÌÑ∞ Ï∞ΩÎ¨∏ÏúºÎ°ú Î∞ñÏóê Î≥ºÎùºÍ≥†...' },
    { speaker: 'choi', text: ' Í∑∏Îüº ÎÇòÎäî ÏâºÌÑ∞ Ìïú Î≤à Î≥ºÍ≤å, ÎÑàÎäî Î∞ò Í∞îÎã§ Ïò¨Îûò..?' },
    { speaker: 'an', text: ' ÌòºÏûê Í∞ÄÎäî Í±∞ Ïã´Ïñ¥... Í∑∏ÎÉ• Í∞ôÏù¥ Í∞ÄÏûê...' },
];

function Page5() {
    const navigate = useNavigate();

    const [fadeIn, setFadeIn] = useState(false);
    const [showSceneText, setShowSceneText] = useState(false);
    const [showTxtBox, setShowTxtBox] = useState(false);
    const [bgClass, setBgClass] = useState('bg3-1'); // Í∏∞Î≥∏ Î∞∞Í≤Ω ÌÅ¥ÎûòÏä§

    const [currentIndex, setCurrentIndex] = useState(0);
    const [displayText, setDisplayText] = useState('');
    const [typing, setTyping] = useState(false);

    const [showChoices, setShowChoices] = useState(false); // ÏÑ†ÌÉùÏßÄ ÌëúÏãú Ïó¨Î∂Ä

    const currentDialogue = dialogues[currentIndex];
    const speaker = currentDialogue?.speaker;
    const intervalRef = useRef(null);
    const location = useLocation();

    const playSfx = (filename) => {
        const sfx = new Audio(import.meta.env.BASE_URL + `sounds/${filename}`);
        sfx.volume = 0.6;
        sfx.play().catch((err) => console.warn('üéµ Ìö®Í≥ºÏùå Ïû¨ÏÉù Ïã§Ìå®:', err));
    };
    useEffect(() => {
        if (currentIndex === 9 - 1) {
            playSfx('Scream2.mp3');
        }
    }, [currentIndex]);

    useEffect(() => {
        setTimeout(() => setFadeIn(true), 100);
        setTimeout(() => setShowSceneText(true), 1600);
        setTimeout(() => setShowSceneText(false), 3600);
        setTimeout(() => setShowTxtBox(true), 3700);
    }, []);

    useEffect(() => {
        localStorage.setItem('prevPage', location.pathname);
    }, []);

    // ÌÉÄÏù¥Ìïë Ìö®Í≥º
    useEffect(() => {
        if (showTxtBox && currentDialogue) {
            let i = 0;
            setDisplayText('');
            setTyping(true);

            // ‚úÖ Î∞∞Í≤Ω Ï†ÑÌôò Ìö®Í≥º (choi2 ÎÇòÏò§Í∏∞ ÏßÅÏ†Ñ)
            if (currentIndex === 8) {
                setBgClass('bg3-1-flash');
                setTimeout(() => {
                    setBgClass('bg3-1');
                }, 750); // 0.5Ï¥à Îí§ ÏõêÎûòÎåÄÎ°ú
            }

            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }

            intervalRef.current = setInterval(() => {
                if (i >= currentDialogue.text.length) {
                    clearInterval(intervalRef.current);
                    intervalRef.current = null;
                    setTyping(false);
                    return;
                }
                setDisplayText(prev => prev + currentDialogue.text.charAt(i));
                i++;
            }, 100);

            return () => clearInterval(intervalRef.current);
        }
    }, [currentIndex, showTxtBox]);

    const handleClick = () => {
        if (typing) {
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
                intervalRef.current = null;
            }
            setDisplayText(currentDialogue.text);
            setTyping(false);
            return;
        }

        if (currentIndex < dialogues.length - 1) {
            setCurrentIndex(prev => prev + 1);
        } else {
            navigate('/web-game/page6');
        }
    };

    return (
        <div className={`page-container ${bgClass} ${fadeIn ? 'fade-in' : ''}`}>
            <Menu />
            {showSceneText && <div className="scene-text">- 3Ï∏µ -</div>}

            <div className={`txt-box ${showTxtBox ? 'fade-in' : ''}`} onClick={handleClick}>
                <div className="left">
                    {!showChoices && (
                        <>
                            <img className='an' src={import.meta.env.BASE_URL + "images/an1.png"} style={{ display: speaker === 'an' ? 'block' : 'none' }} />
                            <img className='an' src={import.meta.env.BASE_URL + "images/an2.png"} style={{ display: speaker === 'an2' ? 'block' : 'none' }} />
                            <img className='choi' src={import.meta.env.BASE_URL + "images/choi1.png"} style={{ display: speaker === 'choi' ? 'block' : 'none' }} />
                            <img className='choi' src={import.meta.env.BASE_URL + "images/choi2.png"} style={{ display: speaker === 'choi2' ? 'block' : 'none' }} />
                        </>
                    )}
                </div>
                <div className="right">
                    <div className="top">
                        <h3 className='an' style={{ display: speaker === 'an' || speaker === 'an2' ? 'block' : 'none' }}>ÏïàÎèôÍ∑º</h3>
                        <h3 className='choi' style={{ display: speaker === 'choi' || speaker === 'choi2' ? 'block' : 'none' }}>ÏµúÌÉúÎØº</h3>
                    </div>
                    <div className="bottom">
                        <p className='an' style={{ display: speaker === 'an' || speaker === 'an2' ? 'block' : 'none' }}>{displayText}</p>
                        <p className='choi' style={{ display: speaker === 'choi' || speaker === 'choi2' ? 'block' : 'none' }}>{displayText}</p>
                    </div>
                </div>
            </div>

            <AutoButton isTypingDone={!typing} onAutoNext={handleClick} />
        </div>
    );
}

export default Page5;